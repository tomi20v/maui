<?php

namespace maui;

/**
 * Interface SchemaElementInterface for SchemaAttr and SchemaRelative
 *
 * @package maui
 */
abstract class SchemaFieldAbstract {

	use \maui\TraitHasLabel;

	/**
	 * @var string field name in schema
	 */
	protected $_key;

	/**
	 * @var string my model's classname
	 */
	protected $_context;

	protected $_hasMin = null;

	protected $_hasMax = null;

	/**
	 * @var bool if true I must have some value. Depending on validators, the value can still be empty eg. ''
	 */
	protected $_required = false;

	/**
	 * @var \SchemaValidator[]
	 */
	protected $_validators = array();

	/**
	 * @var mixed will be returned as default value. Can be overridden in getDefault()
	 */
	protected $_default = null;

	/**
	 * I return an instance of me created by $schema definition. This method must be implemented in child classes
	 * 	(but should not be abstract as it is static...)
	 * @param array $schema definition
	 * @param null $key my key in the object
	 * @return \SchemaFieldAttr|\SchemaFieldRelative
	 */
	public static function from($schema, $context, $key=null) {
		// this
		return null;
	}

	/**
	 * @return bool I return true if current field stores multiple values
	 */
	public function isMulti() {
		return ($this->_hasMax === 0) || ($this->_hasMin > 1) || ($this->_hasMax > 1);
	}

	/**
	 * I return true if $val passes all validators
	 * @param $val
	 * @param null $Model send Model object to validate in context (eg. unique)
	 * @return bool true if validation succeeded, false if could be validated but failed, null if
	 * 		could not validate - eg. the toInt validator will return null on an object type val
	 *		as it cannot cast object to int for validation
	 * NOTE validation sequence matters as validation will stop on a first null response. This
	 * 		can solve the problem of displaying failed 'min' and 'max' errors if field contains text
	 */
	abstract public function validate($val, $Model=null);

	/**
	 * I return all errors generated by validation for this field
	 * @param $val
	 * @param null $Model send Model object to validate in context (eg. unique)
	 * @return array|null
	 */
	abstract public function getErrors($val, $Model=null);

	/**
	 * I return the default message if field is required but left empty
	 * @return string
	 */
	public function getRequiredError() {
		return 'required';
	}

	/**
	 * I apply $val so its suitable for the current field
	 * @param $val it will be modified directly
	 * @return bool true if value could be applied
	 */
	abstract public function apply(&$val, $Model=null);

	/**
	 * I return a value that is part of $val but suits my field, if possible (eg. cut a 5 member array to 3 for fallback)
	 * @param $val
	 * @return mixed
	 */
	abstract public function filter($val);

	/**
	 * I will be called right before save
	 * @param $key
	 * @param $Model
	 * @return bool
	 */
	abstract public function beforeSave($key, $Model);

	public function getDefault($key, $Model) {
		return $this->_default;
	}

}
